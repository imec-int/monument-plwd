name: $(Date:yyyyMMdd)$(Rev:.r)

pool:
  vmImage: 'ubuntu-20.04'

trigger:
  batch: true
  branches:
    include:
      - master
      - main
      - develop
      - feature/*
      - hotfix/*
      - support/*
      - issue/*
      - release/*

variables:
  - group: 'monument-activity-dev'
  - name: containerRegistry
    value: 'Monument Activity - Docker container registry'
  - name: imageRepository
    value: 'monument-activity-web-app'
  - name: 'loginServer'
    value: 'monumentactivity.azurecr.io'
  - name: trivyVersion
    value: 0.29.2
  - group: monument-diary
  - name: postgis
    value: postgis/postgis:11-3.2-alpine

jobs:
  - job: build_web
    displayName: Build web

    steps:
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/git-commands?view=azure-devops&tabs=yaml
      - checkout: self
        persistCredentials: true

      # Read .nvmrc value and assign it as the nodeVersion variable in the pipeline
      # so it can be used in the upcoming jobs as an input.
      #
      # Read more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch
      #
      - bash: |
          NVM_NODE_VERSION=$(cat .nvmrc)
          echo "##vso[task.setvariable variable=nodeVersion]$NVM_NODE_VERSION"
        displayName: Set Node version
        workingDirectory: 'web'

      - task: NodeTool@0
        displayName: Install NodeJS
        inputs:
          # nodeVersion variable is set in the previous job
          versionSpec: $(nodeVersion)

      - task: Npm@1
        displayName: Install web dependencies
        inputs:
          command: 'install'
          workingDir: web

      - task: Npm@1
        displayName: Lint web
        inputs:
          command: 'custom'
          customCommand: 'run lint'
          workingDir: web

      - template: .azure-devops/gitversion.yml

      # This .env file contains all necessary environment variables
      # for the NextJS build process. This circumvents the issue that
      # the Docker task's "buildAndPush" command does not allow for providing arguments...
      - task: Bash@3
        displayName: Make .env file for Docker Build
        inputs:
          targetType: 'inline'
          script: |
            echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=$(NEXT_PUBLIC_GOOGLE_MAPS_API_KEY)" > web/.env.local
            echo "NEXT_PUBLIC_MAPBOX_TOKEN=$(NEXT_PUBLIC_MAPBOX_TOKEN)" >> web/.env.local

      - task: Docker@2
        displayName: Docker Build and Push Image
        inputs:
          containerRegistry: $(containerRegistry)
          repository: $(imageRepository)
          command: 'buildAndPush'
          tags: |
            $(GitVersion.SemVer)
            $(Build.BuildId)
          Dockerfile: 'web/Dockerfile'

      - task: Bash@3
        # This will also create a Github release
        displayName: 'Git tag'
        # Only make a tag/release for the master branch
        condition: eq(variables['Build.SourceBranchName'], 'main')
        inputs:
          filePath: '.azure-devops/tag.sh'

      - script: |
          sudo apt-get install rpm
          wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
          sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
          trivy -v
        displayName: 'Download and install Trivy'

      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: $(containerRegistry)

      - task: CmdLine@2
        displayName: 'Run trivy scan'
        # In case this causes concerns: read https://lgulliver.github.io/container-security-scanning-with-trivy-in-azure-devops/
        # and know that a file .trivyignore can be used to ignore risks. Please be careful with this...
        inputs:
          script: |
            trivy image --exit-code 0 --severity LOW,MEDIUM $(loginServer)/$(imageRepository):$(Build.BuildId)
            trivy image --exit-code 1 --severity HIGH,CRITICAL $(loginServer)/$(imageRepository):$(Build.BuildId)

  - job: Build_api
    displayName: Build api
    steps:
      - checkout: self
        persistCredentials: true

      - bash: echo "##vso[task.setvariable variable=output;isOutput=true]$(cat .nvmrc)"
        workingDirectory: api
        name: setNodeVersionVariable

      - task: NodeTool@0
        displayName: Install NodeJS
        inputs:
          # nodeVersion variable is set in the previous job
          versionSpec: $(nodeVersion)

      - script: docker pull $(postgis)
        displayName: Docker Pull Postgis

      - task: Bash@3
        displayName: 'Build and test api'
        inputs:
          targetType: 'inline'
          workingDirectory: api
          script: |
            npm install
            npm run test || exit
            npm run build || exit
            exit $?

      - task: AzureWebApp@1
        name: "deploy_api_to_app_service"
        displayName: "Deploy api"
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
        inputs:
          azureSubscription: 'Azure service connection for Monument'
          appType: 'webApp'
          appName: 'monument-diary-backend-prod'
          package: 'api'
          deploymentMethod: 'auto'